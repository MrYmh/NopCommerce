@using Nop.Web.Areas.Admin.Models.Warehouses
@model WarehouseProductSearchModel
@{
    //page title
    ViewBag.PageTitle = T("Admin.Warehouses.WarehouseProduct.List").Text;
    //active menu item (system name)
    NopHtml.SetActiveMenuItemSystemName("Warehouses list");
}

@{
    const string hideSearchBlockAttributeName = "WarehouseProductPage.HideSearchBlock";
    var hideSearchBlock = await genericAttributeService.GetAttributeAsync<bool>(await workContext.GetCurrentCustomerAsync(), hideSearchBlockAttributeName);
}

@await Component.InvokeAsync("WarehouseNavbar", new { id = Model.WarehouseId })

<div class="content-header clearfix">
    <h1 class="float-left">
        @T("Admin.Warehouses.WarehouseProduct")
    </h1>
</div>


<div class="content-header clearfix">
    @* <div class="float-left">
        <a asp-controller="WarehouseManagment" asp-action="List" asp-route-id="@Model.WarehouseId" class="btn btn-outline-primary">
            <i class="fas fa-arrow-circle-left"></i>
            @T("Warehouse.Home")
        </a>
    </div> *@
    <div class="float-right">
        <a asp-action="Create" asp-route-warehouseId="@Model.WarehouseId" class="btn btn-primary">
            <i class="fas fa-plus-square"></i>
            @T("Admin.Common.AddNew")
        </a>
        
        @await Component.InvokeAsync(typeof(AdminWidgetViewComponent), new { widgetZone = AdminWidgetZones.WarehouseProductListButtons, additionalData = Model })
        <button type="button" id="delete-selected" asp-route-warehouseId="@Model.WarehouseId" class="btn btn-danger">
            <i class="far fa-trash-alt"></i>
            @T("Admin.Common.Delete.Selected")
        </button>
        <nop-action-confirmation asp-button-id="delete-selected" />
    </div>
</div>

<section class="content">
    <div class="container-fluid">
        <div class="form-horizontal">
            <div class="cards-group">
                <div class="card card-default card-search">
                    <div class="card-body">
                        <div class="row search-row @(!hideSearchBlock ? "opened" : "")" data-hideAttribute="@hideSearchBlockAttributeName">
                            <div class="search-text">@T("Admin.Common.Search")</div>
                            <div class="icon-search"><i class="fas fa-search" aria-hidden="true"></i></div>
                            <div class="icon-collapse"><i class="far fa-angle-@(!hideSearchBlock ? "up" : "down")" aria-hidden="true"></i></div>
                        </div>
                        <div class="search-body @(hideSearchBlock ? "closed" : "")">
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="form-group row">
                                        <div class="col-md-4">
                                            <nop-label asp-for="Name" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-editor asp-for="Name" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-md-4">
                                            <nop-label asp-for="Sku" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-editor asp-for="Sku" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="text-center col-12">
                                    <button type="button" id="search-WarehouseProduct" class="btn btn-primary btn-search"><i class="fas fa-search"></i>@T("Admin.Common.Search")</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card card-default">
                    <div class="card-body">
                        @* <nop-doc-reference asp-string-resource="@T("Admin.Documentation.Reference.Categories", Docs.Categories + Utm.OnAdmin)" /> *@

                        @await Html.PartialAsync("Table", new DataTablesModel
                        {
                            Name = "WarehouseProduct-grid",
                            UrlRead = new DataUrl("List", "WarehouseProduct",new RouteValueDictionary { { "warehouseId", Model.WarehouseId } }),
                            SearchButtonId = "search-WarehouseProduct",
                            Length = Model.PageSize,
                            LengthMenu = Model.AvailablePageSizes,
                            Filters = new List<FilterParameter>
                            {
                                new FilterParameter(nameof(Model.Name)),
                                new FilterParameter(nameof(Model.Sku)),
                            },
                            ColumnCollection = new List<ColumnProperty>
                            {
                                new ColumnProperty(nameof(WarehouseProductModel.Id))
                                {
                                    IsMasterCheckBox = true,
                                    Render = new RenderCheckBox("checkbox_WarehouseProduct"),
                                    ClassName =  NopColumnClassDefaults.CenterAll,
                                    Width = "50"
                                },

                                new ColumnProperty(nameof(WarehouseProductModel.Name))
                                {
                                    Title = T("Admin.Warehouses.WarehouseProduct.Fields.Name").Text,
                                    ClassName =  NopColumnClassDefaults.CenterAll
                                },

                                new ColumnProperty(nameof(WarehouseProductModel.Sku))
                                {
                                    Title = T("Admin.Warehouses.WarehouseProduct.Fields.Sku").Text,
                                    ClassName =  NopColumnClassDefaults.CenterAll
                                },

                                new ColumnProperty(nameof(WarehouseProductModel.Available))
                                {
                                    Title = T("Admin.Warehouses.WarehouseProduct.Fields.Available").Text,
                                    ClassName =  NopColumnClassDefaults.CenterAll,
                                    Render = new RenderCustom("renderAvailabilityStatus")
                                },
                                new ColumnProperty(nameof(WarehouseProductModel.Id))
                                {
                                    Title = T("Admin.Common.Refresh").Text,
                                    Width = "100",
                                    ClassName =  NopColumnClassDefaults.CenterAll,
                                    Render = new RenderCustom("renderRefreshColumn")
                                }
                            }
                        })
                        
                        <nop-alert asp-alert-id="deleteSelectedFailed" />
                        <nop-alert asp-alert-id="nothingSelectedAlert" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    $(document).ready(function () {
        $('#delete-selected-action-confirmation-submit-button').bind('click', function () {
            var postData = {
                selectedIds: selectedIds
            };
            addAntiForgeryToken(postData);
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("DeleteSelected", "WarehouseProduct"))",
                data: postData,
                error: function (jqXHR, textStatus, errorThrown) {
                    showAlert('deleteSelectedFailed', errorThrown);
                },
                complete: function (jqXHR, textStatus) {
                    if (jqXHR.status === 204) {
                        showAlert('nothingSelectedAlert', '@T("Admin.Common.Alert.NothingSelected")');
                        return;
                    }
                    updateTable('#WarehouseProduct-grid');
                }
            });
            $('#delete-selected-action-confirmation').modal('toggle');
            return false;
        });
    });

    function renderAvailabilityStatus(data, type, row) {
        return data ? '@T("Admin.Warehouses.WarehouseProductCombination.Values.Available")' : '@T("Admin.Warehouses.WarehouseProductCombination.Values.Unavailable")';
    }

    function renderRefreshColumn(data, type, row, meta) {
        return '<button class="btn btn-outline-info" onclick="refreshProduct(' + data + ')"><i class="fas fa-sync"></i>' + '@T("Admin.Common.Refresh")' + '</button>';
    }

    function refreshProduct(productId) {
        var warehouseId = @Model.WarehouseId;
        var url = '/api/WarehouseProducts/UpdateWarehouseProductCombinations?warehouseProductId=' + productId + '&warehouseId=' + warehouseId;

        $.ajax({
            url: url,
            method: "POST",
            success: function (response) {
                console.log("Operation Successful:", response);
                $('#WarehouseProduct-grid').DataTable().ajax.reload(null, false);
                location.reload();
            },
            error: function (xhr, status, error) {
                console.error('AJAX Error:', xhr.responseText, status, error);
            }
        });
    }

</script>